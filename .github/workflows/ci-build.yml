name: trading-engine-ci-pipeline

on:
#  push:
#    branches:
#      - dev
  workflow_dispatch: # setting for manual runs of the pipeline. 

jobs:
  build:   # this is the first job - to build the application first with npm
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code # first step in this build JOB is to checkout code from branch
        uses: actions/checkout@v2

      - name: Install Node.js    # second step is to set up environment for node build
        uses: actions/setup-node@v2
        with:
          node-version: 18

      - name: Install dependencies  # third step is to install dependencies
        run: npm install

      - name: Build      # fourth step is to test by trying to build node 
      # - this uses the build script in the script file
        run: npm run build

      - name: Start       # last step is to test by trying to start node 
      # - this uses the start script in the script file in package.json
        run: npm start
        continue-on-error: true

  test: # Another Job. Here we perform the unit n linting test.
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 18

      - name: Install dependencies
        run: npm install --only=dev # here we r specifying & using just the development dependencies
# as specified in devDependencies in the package.json file.

      - name: Lint           #fourth step in this JOB - performing lint test with Eslint
        run: npm run lint

      - name: Unit Tests       
        run: npm test
  # test is now complete. we hv built d app, started the server and ran unit n lint tests.      
        
  docker_build_and_push_to_ecr:
    runs-on: ubuntu-latest

    steps:

    - name: Check out code
      uses: actions/checkout@v2
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-central-1

    - name: Login to Amazon ECR
      id: ecr-login-id #this is an id for this step. So u can use the id to ref d step later in d workflow.
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build Docker Image, tag and push image to Amazon ECR
      env:   # here we r creating env vars n assigning values to them.
        ECR_REGISTRY: ${{ steps.ecr-login-id.outputs.registry }}
        ECR_REPOSITORY: trading-engine-service-test
        IMAGE_TAG: latest
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
