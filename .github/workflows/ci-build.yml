name: trading-engine-ci-pipeline

on:
  # Uncomment and adjust the following lines for trigger events like pushes or pull requests.
  # push:
  #   branches:
  #     - dev
  #     - pull_request
  workflow_dispatch: # setting for manual runs of the pipeline.

jobs:
  build:   # this is the first job - to build the application first with npm
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code # first step in this build JOB is to checkout code from branch
        uses: actions/checkout@v2

      - name: Install Node.js    # second step is to set up environment for node build
        uses: actions/setup-node@v2
        with:
          node-version: 16.15

      - name: Install dependencies  # third step is to install dependencies
        run: npm install

      - name: Build      
        run: npm run build

  test: # Another Job. Here we start the server, run the build, and perform unit and linting tests.
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Start the application
        run: npm start

      - name: Install dependencies
        run: npm install --only=dev # here we are specifying and using just the development dependencies

      - name: Start development server
        run: npm run dev

      - name: Run tests
        run: npm test

      - name: Run linter
        run: npm run lint

  # test is now complete. We have built the app, started the server, and ran unit and lint tests.      
        
  docker_build_and_push_to_ecr:
    runs-on: ubuntu-latest

    steps:

    - name: Check out code
      uses: actions/checkout@v2
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-central-1

    - name: Login to Amazon ECR
      id: ecr-login-id # this is an id for this step. So you can use the id to reference the step later in the workflow.
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build Docker Image, tag, and push image to Amazon ECR
      env:   # here we are creating environment variables and assigning values to them.
        ECR_REGISTRY: ${{ steps.ecr-login-id.outputs.registry }}
        ECR_REPOSITORY: trading-engine-service-test
        IMAGE_TAG: latest
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
